{"ast":null,"code":"// import React, { useEffect, useReducer, useState } from 'react'\n// import Nontification from '../Login-nontification/Login-nontificaton'\n// import Reducer from '../../Reducer/Login'\n// import InitialState from '../../InitiaState/Login'\n// // import { Link } from 'react-router-dom'\n// import { GET_LIST_URL_FOR_LOGIN } from '../../Config/index'\n// import { useHistory } from 'react-router-dom'\n// const LoginForm = (props) => {\n// \tlet history = useHistory()\n// \tconst { handleLogout } = props\n// \tconst [state, dispatch] = useReducer(Reducer, InitialState)\n// \tconst [error, seterror] = useState([])\n// \tconst onSubmitForm = async (e) => {\n// \t\te.preventDefault()\n// \t\tlet { room, password } = state\n// \t\tlet error = []\n// \t\tlet isError = false\n// \t\t//check if( any thing empty)\n// \t\tif (room === '') {\n// \t\t\terror.push(\"Room can't be empty\")\n// \t\t\tisError = true\n// \t\t}\n// \t\tif (password === '') {\n// \t\t\terror.push(\"Password can't be empty\")\n// \t\t\tisError = true\n// \t\t}\n// \t\tif (error.length === 0) {\n// \t\t\t//if room is exist\n// \t\t\tlet listRoom = null\n// \t\t\tawait fetch(GET_LIST_URL_FOR_LOGIN)\n// \t\t\t\t.then((res) => res.json())\n// \t\t\t\t.then(\n// \t\t\t\t\t(rs) => {\n// \t\t\t\t\t\tlistRoom = rs\n// \t\t\t\t\t},\n// \t\t\t\t\t(error) => {\n// \t\t\t\t\t\tconsole.log(error)\n// \t\t\t\t\t},\n// \t\t\t\t)\n// \t\t\tif (listRoom === null) {\n// \t\t\t\terror.push('Connection Error')\n// \t\t\t\tisError = true\n// \t\t\t} else {\n// \t\t\t\tlet isExistRoom = false\n// \t\t\t\tlet isPassword = true\n// \t\t\t\tlistRoom.forEach((ele) => {\n// \t\t\t\t\tif (ele.room !== room) {\n// \t\t\t\t\t} else {\n// \t\t\t\t\t\tif (ele.password !== password) {\n// \t\t\t\t\t\t\tisError = true\n// \t\t\t\t\t\t\tisExistRoom = true\n// \t\t\t\t\t\t\tisPassword = false\n// \t\t\t\t\t\t} else {\n// \t\t\t\t\t\t\tisExistRoom = true\n// \t\t\t\t\t\t}\n// \t\t\t\t\t}\n// \t\t\t\t})\n// \t\t\t\tif (isExistRoom === false) error.push('Room is not exist')\n// \t\t\t\tif (isPassword === false) error.push('Wrong password')\n// \t\t\t}\n// \t\t\tif (isError === false && error.length === 0) {\n// \t\t\t\thistory.push(`/chat/${room}`)\n// \t\t\t} else {\n// \t\t\t\tseterror(error)\n// \t\t\t}\n// \t\t} else {\n// \t\t\tseterror(error)\n// \t\t}\n// \t}\n// \tconst onCreate = async (e) => {\n// \t\te.preventDefault()\n// \t\tlet { room, password } = state\n// \t\tlet error = []\n// \t\tlet isError = false\n// \t\t//check if( any thing empty)\n// \t\tif (room === '') {\n// \t\t\terror.push(\"Room can't be empty\")\n// \t\t\tisError = true\n// \t\t}\n// \t\tif (password === '') {\n// \t\t\terror.push(\"Password can't be empty\")\n// \t\t\tisError = true\n// \t\t}\n// \t\tif (room && password) {\n// \t\t\tlet listRoom = null\n// \t\t\tawait fetch(GET_LIST_URL_FOR_LOGIN)\n// \t\t\t\t.then((res) => res.json())\n// \t\t\t\t.then((data) => (listRoom = data))\n// \t\t\t\t.catch((error) => console.log(error))\n// \t\t\tif (listRoom === null) {\n// \t\t\t\terror.push('Server is off')\n// \t\t\t} else {\n// \t\t\t\t//sever is on\n// \t\t\t\t//we need no room math\n// \t\t\t\tlet isExistRoom = false\n// \t\t\t\tlistRoom.forEach((ele) => {\n// \t\t\t\t\tif (ele.room === room) {\n// \t\t\t\t\t\tisExistRoom = true\n// \t\t\t\t\t}\n// \t\t\t\t})\n// \t\t\t\tif (isExistRoom) {\n// \t\t\t\t\terror.push(\"Room's name existed\")\n// \t\t\t\t} else {\n// \t\t\t\t\t//add new room\n// \t\t\t\t\thistory.push(`/chat/${room}`)\n// \t\t\t\t\tawait fetch(GET_LIST_URL_FOR_LOGIN + `/${room}/${password}`)\n// \t\t\t\t\t\t.then((res) => {\n// \t\t\t\t\t\t\tconsole.log('send oke')\n// \t\t\t\t\t\t})\n// \t\t\t\t\t\t.catch((error) => {\n// \t\t\t\t\t\t\tconsole.log(error)\n// \t\t\t\t\t\t})\n// \t\t\t\t\tconsole.log('come here')\n// \t\t\t\t}\n// \t\t\t}\n// \t\t}\n// \t\tseterror(error)\n// \t\treturn error\n// \t}\n// \treturn (\n// \t\t<div className='content'>\n// \t\t\t<div className='welcome'>\n// \t\t\t\t<h1>Welcome</h1>\n// \t\t\t\t<p className='username'>{localStorage.getItem('username')}</p>\n// \t\t\t\t<button\n// \t\t\t\t\tclassName='btn-logout'\n// \t\t\t\t\tonClick={(e) => {\n// \t\t\t\t\t\te.preventDefault()\n// \t\t\t\t\t\tlocalStorage.removeItem('username')\n// \t\t\t\t\t\thandleLogout()\n// \t\t\t\t\t}}\n// \t\t\t\t>\n// \t\t\t\t\tLogout\n// \t\t\t\t</button>\n// \t\t\t</div>\n// \t\t\t<h1>Choose Room</h1>\n// \t\t\t<hr />\n// \t\t\t<form action=''>\n// \t\t\t\t<label htmlFor='room'>Room</label>\n// \t\t\t\t<input\n// \t\t\t\t\ttype='text'\n// \t\t\t\t\tname='room'\n// \t\t\t\t\tid='room'\n// \t\t\t\t\tplaceholder='Enter room'\n// \t\t\t\t\tvalue={state.room}\n// \t\t\t\t\tonChange={(e) =>\n// \t\t\t\t\t\tdispatch({\n// \t\t\t\t\t\t\ttype: 'UPDATE ROOM',\n// \t\t\t\t\t\t\tpayload: e.target.value,\n// \t\t\t\t\t\t})\n// \t\t\t\t\t}\n// \t\t\t\t/>\n// \t\t\t\t<label htmlFor='password'>Password</label>\n// \t\t\t\t<input\n// \t\t\t\t\ttype='password'\n// \t\t\t\t\tname='password'\n// \t\t\t\t\tid='password'\n// \t\t\t\t\tplaceholder='Enter password'\n// \t\t\t\t\tvalue={state.password}\n// \t\t\t\t\tonChange={(e) =>\n// \t\t\t\t\t\tdispatch({\n// \t\t\t\t\t\t\ttype: 'UPDATE PASSWORD',\n// \t\t\t\t\t\t\tpayload: e.target.value,\n// \t\t\t\t\t\t})\n// \t\t\t\t\t}\n// \t\t\t\t/>\n// \t\t\t\t<div className='control-btn'>\n// \t\t\t\t\t<button\n// \t\t\t\t\t\tclassName='btn-sign-in'\n// \t\t\t\t\t\tonClick={(e) => onSubmitForm(e)}\n// \t\t\t\t\t>\n// \t\t\t\t\t\tGO\n// \t\t\t\t\t</button>\n// \t\t\t\t\t<button\n// \t\t\t\t\t\tclassName='btn-sign-in'\n// \t\t\t\t\t\tonClick={(e) => onCreate(e)}\n// \t\t\t\t\t>\n// \t\t\t\t\t\tCREATE\n// \t\t\t\t\t</button>\n// \t\t\t\t</div>\n// \t\t\t\t{/* </Link> */}\n// \t\t\t\t<Nontification error={error} />\n// \t\t\t</form>\n// \t\t</div>\n// \t)\n// }\n// export default LoginForm","map":{"version":3,"sources":["/home/captainspring/Desktop/code/WebSocket/myproject/clientx/src/Components/Logn-Form/Login-Form.js"],"names":[],"mappingssourcesContent":["// import React, { useEffect, useReducer, useState } from 'react'\n// import Nontification from '../Login-nontification/Login-nontificaton'\n// import Reducer from '../../Reducer/Login'\n// import InitialState from '../../InitiaState/Login'\n// // import { Link } from 'react-router-dom'\n// import { GET_LIST_URL_FOR_LOGIN } from '../../Config/index'\n// import { useHistory } from 'react-router-dom'\n// const LoginForm = (props) => {\n// \tlet history = useHistory()\n// \tconst { handleLogout } = props\n// \tconst [state, dispatch] = useReducer(Reducer, InitialState)\n// \tconst [error, seterror] = useState([])\n// \tconst onSubmitForm = async (e) => {\n// \t\te.preventDefault()\n// \t\tlet { room, password } = state\n// \t\tlet error = []\n// \t\tlet isError = false\n// \t\t//check if( any thing empty)\n// \t\tif (room === '') {\n// \t\t\terror.push(\"Room can't be empty\")\n// \t\t\tisError = true\n// \t\t}\n// \t\tif (password === '') {\n// \t\t\terror.push(\"Password can't be empty\")\n// \t\t\tisError = true\n// \t\t}\n// \t\tif (error.length === 0) {\n// \t\t\t//if room is exist\n// \t\t\tlet listRoom = null\n// \t\t\tawait fetch(GET_LIST_URL_FOR_LOGIN)\n// \t\t\t\t.then((res) => res.json())\n// \t\t\t\t.then(\n// \t\t\t\t\t(rs) => {\n// \t\t\t\t\t\tlistRoom = rs\n// \t\t\t\t\t},\n// \t\t\t\t\t(error) => {\n// \t\t\t\t\t\tconsole.log(error)\n// \t\t\t\t\t},\n// \t\t\t\t)\n// \t\t\tif (listRoom === null) {\n// \t\t\t\terror.push('Connection Error')\n// \t\t\t\tisError = true\n// \t\t\t} else {\n// \t\t\t\tlet isExistRoom = false\n// \t\t\t\tlet isPassword = true\n// \t\t\t\tlistRoom.forEach((ele) => {\n// \t\t\t\t\tif (ele.room !== room) {\n// \t\t\t\t\t} else {\n// \t\t\t\t\t\tif (ele.password !== password) {\n// \t\t\t\t\t\t\tisError = true\n// \t\t\t\t\t\t\tisExistRoom = true\n// \t\t\t\t\t\t\tisPassword = false\n// \t\t\t\t\t\t} else {\n// \t\t\t\t\t\t\tisExistRoom = true\n// \t\t\t\t\t\t}\n// \t\t\t\t\t}\n// \t\t\t\t})\n// \t\t\t\tif (isExistRoom === false) error.push('Room is not exist')\n// \t\t\t\tif (isPassword === false) error.push('Wrong password')\n// \t\t\t}\n// \t\t\tif (isError === false && error.length === 0) {\n// \t\t\t\thistory.push(`/chat/${room}`)\n// \t\t\t} else {\n// \t\t\t\tseterror(error)\n// \t\t\t}\n// \t\t} else {\n// \t\t\tseterror(error)\n// \t\t}\n// \t}\n// \tconst onCreate = async (e) => {\n// \t\te.preventDefault()\n// \t\tlet { room, password } = state\n// \t\tlet error = []\n// \t\tlet isError = false\n// \t\t//check if( any thing empty)\n// \t\tif (room === '') {\n// \t\t\terror.push(\"Room can't be empty\")\n// \t\t\tisError = true\n// \t\t}\n// \t\tif (password === '') {\n// \t\t\terror.push(\"Password can't be empty\")\n// \t\t\tisError = true\n// \t\t}\n// \t\tif (room && password) {\n// \t\t\tlet listRoom = null\n// \t\t\tawait fetch(GET_LIST_URL_FOR_LOGIN)\n// \t\t\t\t.then((res) => res.json())\n// \t\t\t\t.then((data) => (listRoom = data))\n// \t\t\t\t.catch((error) => console.log(error))\n// \t\t\tif (listRoom === null) {\n// \t\t\t\terror.push('Server is off')\n// \t\t\t} else {\n// \t\t\t\t//sever is on\n// \t\t\t\t//we need no room math\n// \t\t\t\tlet isExistRoom = false\n// \t\t\t\tlistRoom.forEach((ele) => {\n// \t\t\t\t\tif (ele.room === room) {\n// \t\t\t\t\t\tisExistRoom = true\n// \t\t\t\t\t}\n// \t\t\t\t})\n// \t\t\t\tif (isExistRoom) {\n// \t\t\t\t\terror.push(\"Room's name existed\")\n// \t\t\t\t} else {\n// \t\t\t\t\t//add new room\n// \t\t\t\t\thistory.push(`/chat/${room}`)\n// \t\t\t\t\tawait fetch(GET_LIST_URL_FOR_LOGIN + `/${room}/${password}`)\n// \t\t\t\t\t\t.then((res) => {\n// \t\t\t\t\t\t\tconsole.log('send oke')\n// \t\t\t\t\t\t})\n// \t\t\t\t\t\t.catch((error) => {\n// \t\t\t\t\t\t\tconsole.log(error)\n// \t\t\t\t\t\t})\n// \t\t\t\t\tconsole.log('come here')\n// \t\t\t\t}\n// \t\t\t}\n// \t\t}\n// \t\tseterror(error)\n// \t\treturn error\n// \t}\n// \treturn (\n// \t\t<div className='content'>\n// \t\t\t<div className='welcome'>\n// \t\t\t\t<h1>Welcome</h1>\n// \t\t\t\t<p className='username'>{localStorage.getItem('username')}</p>\n// \t\t\t\t<button\n// \t\t\t\t\tclassName='btn-logout'\n// \t\t\t\t\tonClick={(e) => {\n// \t\t\t\t\t\te.preventDefault()\n// \t\t\t\t\t\tlocalStorage.removeItem('username')\n// \t\t\t\t\t\thandleLogout()\n// \t\t\t\t\t}}\n// \t\t\t\t>\n// \t\t\t\t\tLogout\n// \t\t\t\t</button>\n// \t\t\t</div>\n\n// \t\t\t<h1>Choose Room</h1>\n\n// \t\t\t<hr />\n// \t\t\t<form action=''>\n// \t\t\t\t<label htmlFor='room'>Room</label>\n// \t\t\t\t<input\n// \t\t\t\t\ttype='text'\n// \t\t\t\t\tname='room'\n// \t\t\t\t\tid='room'\n// \t\t\t\t\tplaceholder='Enter room'\n// \t\t\t\t\tvalue={state.room}\n// \t\t\t\t\tonChange={(e) =>\n// \t\t\t\t\t\tdispatch({\n// \t\t\t\t\t\t\ttype: 'UPDATE ROOM',\n// \t\t\t\t\t\t\tpayload: e.target.value,\n// \t\t\t\t\t\t})\n// \t\t\t\t\t}\n// \t\t\t\t/>\n// \t\t\t\t<label htmlFor='password'>Password</label>\n// \t\t\t\t<input\n// \t\t\t\t\ttype='password'\n// \t\t\t\t\tname='password'\n// \t\t\t\t\tid='password'\n// \t\t\t\t\tplaceholder='Enter password'\n// \t\t\t\t\tvalue={state.password}\n// \t\t\t\t\tonChange={(e) =>\n// \t\t\t\t\t\tdispatch({\n// \t\t\t\t\t\t\ttype: 'UPDATE PASSWORD',\n// \t\t\t\t\t\t\tpayload: e.target.value,\n// \t\t\t\t\t\t})\n// \t\t\t\t\t}\n// \t\t\t\t/>\n// \t\t\t\t<div className='control-btn'>\n// \t\t\t\t\t<button\n// \t\t\t\t\t\tclassName='btn-sign-in'\n// \t\t\t\t\t\tonClick={(e) => onSubmitForm(e)}\n// \t\t\t\t\t>\n// \t\t\t\t\t\tGO\n// \t\t\t\t\t</button>\n// \t\t\t\t\t<button\n// \t\t\t\t\t\tclassName='btn-sign-in'\n// \t\t\t\t\t\tonClick={(e) => onCreate(e)}\n// \t\t\t\t\t>\n// \t\t\t\t\t\tCREATE\n// \t\t\t\t\t</button>\n// \t\t\t\t</div>\n\n// \t\t\t\t{/* </Link> */}\n// \t\t\t\t<Nontification error={error} />\n// \t\t\t</form>\n// \t\t</div>\n// \t)\n// }\n\n// export default LoginForm\n"]},"metadata":{},"sourceType":"module"}