{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/captainspring/Desktop/code/WebSocket/myproject/clientx/src/Components/ChatBox/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './index.css';\nimport ChatBoxStatusRoom from '../ChatBoxStatusRoom/index';\nimport ChatBoxMessageBox from '../ChatBoxMessageBox/index';\nimport ChatBoxTextMesBtn from '../ChatBoxTextMesBtn/index';\nimport { Redirect, useHistory, useParams } from 'react-router-dom';\nimport io from 'socket.io-client';\nimport { GET_URL_FOR_SOCKET, GET_URL_FOR_MESSAGES } from '../../Config/index';\nlet socket;\n\nconst Index = () => {\n  _s();\n\n  const history = useHistory();\n  const param = useParams();\n  const username = localStorage.getItem('username');\n  const [messages, setMessages] = useState([]);\n  const [nums, setNums] = useState(0);\n  const {\n    room\n  } = param;\n\n  const load_messages_from_server = async room => {\n    await fetch(`${GET_URL_FOR_MESSAGES}/${room}`).then(res => res.json()).then(data => {\n      if (data.room_name) {\n        setMessages(data.messages);\n      }\n    }, error => console.log(error));\n  };\n\n  useEffect(() => {\n    load_messages_from_server(room);\n    console.log(messages);\n    socket = io(GET_URL_FOR_SOCKET);\n    socket.emit('join', username, room);\n  }, []);\n  useEffect(() => {\n    socket.on('message', user_text => {\n      setMessages([...messages, user_text]);\n    });\n  }, [messages]);\n  useEffect(() => {\n    socket.on('updateNums', socketnums => {\n      setNums(socketnums);\n    });\n  }, [nums]);\n\n  const sendMessage = async (msg, obj_date) => {\n    await fetch(`${GET_URL_FOR_MESSAGES}/${room}`, {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: username,\n        text: msg,\n        date: obj_date\n      })\n    }).then(res => res.json()).then(data => {\n      console.log(data);\n      return;\n    }, error => {\n      console.log(error);\n      return;\n    });\n    socket.emit('sendMessage', {\n      msg,\n      obj_date\n    });\n    setMessages([...messages, {\n      username: username,\n      text: msg,\n      date: obj_date\n    }]);\n  };\n\n  const handleExitRoom = () => {\n    history.replace('/');\n    socket.disconnect(0);\n  };\n\n  const handleDelete = (index, message) => {\n    // update database\n    console.log(index, message); // fetch(`${GET_URL_FOR_MESSAGES}/${room}`, {\n    // \tmethod: 'PATCH',\n    // \theaders: {\n    // \t\t'Content-type': 'application/json',\n    // \t},\n    // \tbody: JSON.stringify({\n    // \t\tindex,\n    // \t\tmessage,\n    // \t}),\n    // })\n    // \t.then((res) => res.json())\n    // \t.then(\n    // \t\t(data) => console.log(data),\n    // \t\t(error) => console.log(error),\n    // \t)\n    //emit other change\n  };\n\n  return localStorage.getItem('username') === null ? /*#__PURE__*/_jsxDEV(Redirect, {\n    to: \"/\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 3\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"body\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"main\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"message-board\",\n        children: [/*#__PURE__*/_jsxDEV(ChatBoxStatusRoom, {\n          room: param.room,\n          username: username,\n          handleExitRoom: handleExitRoom\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(ChatBoxMessageBox, {\n          messages: messages,\n          username: username,\n          handleDelete: handleDelete\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(ChatBoxTextMesBtn, {\n          sendMessage: sendMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Index, \"ssz11sdopkAyrRFLgzDv3YJLA5k=\", false, function () {\n  return [useHistory, useParams];\n});\n\n_c = Index;\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["/home/captainspring/Desktop/code/WebSocket/myproject/clientx/src/Components/ChatBox/index.js"],"names":["React","useEffect","useState","ChatBoxStatusRoom","ChatBoxMessageBox","ChatBoxTextMesBtn","Redirect","useHistory","useParams","io","GET_URL_FOR_SOCKET","GET_URL_FOR_MESSAGES","socket","Index","history","param","username","localStorage","getItem","messages","setMessages","nums","setNums","room","load_messages_from_server","fetch","then","res","json","data","room_name","error","console","log","emit","on","user_text","socketnums","sendMessage","msg","obj_date","method","headers","body","JSON","stringify","text","date","handleExitRoom","replace","disconnect","handleDelete","index","message"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport './index.css'\nimport ChatBoxStatusRoom from '../ChatBoxStatusRoom/index'\nimport ChatBoxMessageBox from '../ChatBoxMessageBox/index'\nimport ChatBoxTextMesBtn from '../ChatBoxTextMesBtn/index'\nimport { Redirect, useHistory, useParams } from 'react-router-dom'\nimport io from 'socket.io-client'\nimport { GET_URL_FOR_SOCKET, GET_URL_FOR_MESSAGES } from '../../Config/index'\nlet socket\nconst Index = () => {\n\tconst history = useHistory()\n\tconst param = useParams()\n\tconst username = localStorage.getItem('username')\n\tconst [messages, setMessages] = useState([])\n\tconst [nums, setNums] = useState(0)\n\tconst { room } = param\n\tconst load_messages_from_server = async (room) => {\n\t\tawait fetch(`${GET_URL_FOR_MESSAGES}/${room}`)\n\t\t\t.then((res) => res.json())\n\t\t\t.then(\n\t\t\t\t(data) => {\n\t\t\t\t\tif (data.room_name) {\n\t\t\t\t\t\tsetMessages(data.messages)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t(error) => console.log(error),\n\t\t\t)\n\t}\n\n\tuseEffect(() => {\n\t\t\n\t\tload_messages_from_server(room)\n\t\tconsole.log(messages)\n\t\tsocket = io(GET_URL_FOR_SOCKET)\n\t\tsocket.emit('join', username, room)\n\t}, [])\n\tuseEffect(() => {\n\t\tsocket.on('message', (user_text) => {\n\t\t\tsetMessages([...messages, user_text])\n\t\t})\n\t}, [messages])\n\tuseEffect(() => {\n\t\tsocket.on('updateNums', (socketnums) => {\n\t\t\tsetNums(socketnums)\n\t\t})\n\t}, [nums])\n\tconst sendMessage = async (msg, obj_date) => {\n\t\tawait fetch(`${GET_URL_FOR_MESSAGES}/${room}`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tusername: username,\n\t\t\t\ttext: msg,\n\t\t\t\tdate: obj_date,\n\t\t\t}),\n\t\t})\n\t\t\t.then((res) => res.json())\n\t\t\t.then(\n\t\t\t\t(data) => {\n\t\t\t\t\tconsole.log(data)\n\t\t\t\t\treturn\n\t\t\t\t},\n\t\t\t\t(error) => {\n\t\t\t\t\tconsole.log(error)\n\t\t\t\t\treturn\n\t\t\t\t},\n\t\t\t)\n\t\tsocket.emit('sendMessage', { msg, obj_date })\n\t\tsetMessages([\n\t\t\t...messages,\n\t\t\t{\n\t\t\t\tusername: username,\n\t\t\t\ttext: msg,\n\t\t\t\tdate: obj_date,\n\t\t\t},\n\t\t])\n\t}\n\tconst handleExitRoom = () => {\n\t\thistory.replace('/')\n\t\tsocket.disconnect(0)\n\t}\n\tconst handleDelete = (index, message) => {\n\t\t// update database\n\n\t\tconsole.log(index, message)\n\t\t// fetch(`${GET_URL_FOR_MESSAGES}/${room}`, {\n\t\t// \tmethod: 'PATCH',\n\t\t// \theaders: {\n\t\t// \t\t'Content-type': 'application/json',\n\t\t// \t},\n\t\t// \tbody: JSON.stringify({\n\t\t// \t\tindex,\n\t\t// \t\tmessage,\n\t\t// \t}),\n\t\t// })\n\t\t// \t.then((res) => res.json())\n\t\t// \t.then(\n\t\t// \t\t(data) => console.log(data),\n\t\t// \t\t(error) => console.log(error),\n\t\t// \t)\n\t\t//emit other change\n\t}\n\treturn localStorage.getItem('username') === null ? (\n\t\t<Redirect to='/' />\n\t) : (\n\t\t<div class='body'>\n\t\t\t<div class='main'>\n\t\t\t\t<div class='message-board'>\n\t\t\t\t\t<ChatBoxStatusRoom\n\t\t\t\t\t\troom={param.room}\n\t\t\t\t\t\tusername={username}\n\t\t\t\t\t\thandleExitRoom={handleExitRoom}\n\t\t\t\t\t/>\n\t\t\t\t\t<ChatBoxMessageBox\n\t\t\t\t\t\tmessages={messages}\n\t\t\t\t\t\tusername={username}\n\t\t\t\t\t\thandleDelete={handleDelete}\n\t\t\t\t\t/>\n\t\t\t\t\t<ChatBoxTextMesBtn sendMessage={sendMessage} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Index\n"]},"metadata":{},"sourceType":"module"}