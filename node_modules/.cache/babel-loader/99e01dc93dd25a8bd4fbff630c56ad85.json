{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/captainspring/Desktop/code/WebSocket/myproject/clientx/src/Components/Logn-Form/Login-Form.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer, useState } from 'react';\nimport Nontification from '../Login-nontification/Login-nontificaton';\nimport Reducer from '../../Reducer/Login';\nimport InitialState from '../../InitiaState/Login'; // import { Link } from 'react-router-dom'\n\nimport { GET_LIST_URL_FOR_LOGIN } from '../../Config/index';\n\nconst LoginForm = () => {\n  _s();\n\n  const [state, dispatch] = useReducer(Reducer, InitialState);\n  const [error, seterror] = useState([]);\n\n  const onSubmitForm = async e => {\n    e.preventDefault();\n    let {\n      name,\n      room,\n      password\n    } = state;\n    let error = [];\n    let isError = false; //check if( any thing empty)\n\n    if (name === '') {\n      error.push(\"Name can't be empty\");\n      isError = true;\n    }\n\n    if (room === '') {\n      error.push(\"Room can't be empty\");\n      isError = true;\n    }\n\n    if (password === '') {\n      error.push(\"Password can't be empty\");\n      isError = true;\n    }\n\n    if (error.length === 0) {\n      //if room is exist\n      let listRoom = null;\n      await fetch(GET_LIST_URL_FOR_LOGIN).then(res => res.json()).then(rs => {\n        listRoom = rs;\n      }, error => {\n        console.log(error);\n      });\n\n      if (listRoom === null) {\n        error.push('Connection Error');\n        isError = true;\n      } else {\n        let isExistRoom = false;\n        let isPassword = true;\n        listRoom.forEach(ele => {\n          if (ele.room !== room) {} else {\n            if (ele.password !== password) {\n              isError = true;\n              isExistRoom = true;\n              isPassword = false;\n            } else {\n              isExistRoom = true;\n            }\n          }\n        });\n        if (!isExistRoom) error.push('Room is not exist');\n        if (!isPassword) error.push('Wrong password');\n      }\n\n      if (!isError) {\n        console.log('khong co loi nao '); // change router here\n      } else {\n        seterror(error);\n      }\n    } else {\n      seterror(error);\n    }\n  };\n\n  const onCreate = async e => {\n    e.preventDefault;\n    let {\n      name,\n      room,\n      password\n    } = state;\n    let error = [];\n    let isError = false; //check if( any thing empty)\n\n    if (name === '') {\n      error.push(\"Name can't be empty\");\n      isError = true;\n    }\n\n    if (room === '') {\n      error.push(\"Room can't be empty\");\n      isError = true;\n    }\n\n    if (password === '') {\n      error.push(\"Password can't be empty\");\n      isError = true;\n    }\n\n    if (name && room && password) {\n      let listRoom = null;\n      await fetch(GET_LIST_URL_FOR_LOGIN).then(res => res.json()).then(data => listRoom = data).catch(error => console.log(error));\n\n      if (listRoom == null) {\n        error.push('Server is off');\n      } else if (!name || !room || !password) {\n        console.log('Loi');\n      } else {\n        //sever is on\n        //we need no room math\n        let isExistRoom = false;\n        listRoom.forEach(ele => {\n          if (ele.room === room) {\n            isExistRoom = true;\n          }\n        });\n\n        if (isExistRoom) {\n          error.push(\"Room's name existed\");\n        } else {\n          //add new room\n          // await fetch(GET_LIST_URL_FOR_LOGIN + `/${room}/${password}`)\n          // \t.then((res) => console.log('send successful'))\n          // \t.catch((error) => {\n          // \t\tconsole.log(error)\n          // \t})\n          //change router here\n          console.log('come here');\n        }\n      }\n    }\n\n    if (error) {\n      console.log('error');\n    } else {\n      console.log('no error');\n    } // await seterror(error)\n\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"content\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      action: \"\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"name\",\n        id: \"name\",\n        placeholder: \"Enter your name\",\n        value: state.name,\n        onChange: e => dispatch({\n          type: 'UPDATE NAME',\n          payload: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"room\",\n        children: \"Room\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"room\",\n        id: \"room\",\n        placeholder: \"Enter room\",\n        value: state.room,\n        onChange: e => dispatch({\n          type: 'UPDATE ROOM',\n          payload: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"password\",\n        children: \"Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        name: \"password\",\n        id: \"password\",\n        placeholder: \"Enter password\",\n        value: state.password,\n        onChange: e => dispatch({\n          type: 'UPDATE PASSWORD',\n          payload: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control-btn\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"btn-sign-in\",\n          onClick: e => onSubmitForm(e),\n          children: \"GO\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"OR\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"btn-sign-in\",\n          onClick: e => onCreate(e),\n          children: \"CREATE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Nontification, {\n        error: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 3\n  }, this);\n};\n\n_s(LoginForm, \"xkEe/Z3uahcB9DJJdkTIJA6wcHY=\");\n\n_c = LoginForm;\nexport default LoginForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"sources":["/home/captainspring/Desktop/code/WebSocket/myproject/clientx/src/Components/Logn-Form/Login-Form.js"],"names":["React","useReducer","useState","Nontification","Reducer","InitialState","GET_LIST_URL_FOR_LOGIN","LoginForm","state","dispatch","error","seterror","onSubmitForm","e","preventDefault","name","room","password","isError","push","length","listRoom","fetch","then","res","json","rs","console","log","isExistRoom","isPassword","forEach","ele","onCreate","data","catch","type","payload","target","value"],"mappings":"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","sourcesContent":["import React, { useReducer, useState } from 'react'\nimport Nontification from '../Login-nontification/Login-nontificaton'\nimport Reducer from '../../Reducer/Login'\nimport InitialState from '../../InitiaState/Login'\n// import { Link } from 'react-router-dom'\nimport { GET_LIST_URL_FOR_LOGIN } from '../../Config/index'\nconst LoginForm = () => {\n\tconst [state, dispatch] = useReducer(Reducer, InitialState)\n\tconst [error, seterror] = useState([])\n\tconst onSubmitForm = async (e) => {\n\t\te.preventDefault()\n\t\tlet { name, room, password } = state\n\t\tlet error = []\n\t\tlet isError = false\n\t\t//check if( any thing empty)\n\t\tif (name === '') {\n\t\t\terror.push(\"Name can't be empty\")\n\t\t\tisError = true\n\t\t}\n\t\tif (room === '') {\n\t\t\terror.push(\"Room can't be empty\")\n\t\t\tisError = true\n\t\t}\n\t\tif (password === '') {\n\t\t\terror.push(\"Password can't be empty\")\n\t\t\tisError = true\n\t\t}\n\t\tif (error.length === 0) {\n\t\t\t//if room is exist\n\t\t\tlet listRoom = null\n\t\t\tawait fetch(GET_LIST_URL_FOR_LOGIN)\n\t\t\t\t.then((res) => res.json())\n\t\t\t\t.then(\n\t\t\t\t\t(rs) => {\n\t\t\t\t\t\tlistRoom = rs\n\t\t\t\t\t},\n\t\t\t\t\t(error) => {\n\t\t\t\t\t\tconsole.log(error)\n\t\t\t\t\t},\n\t\t\t\t)\n\t\t\tif (listRoom === null) {\n\t\t\t\terror.push('Connection Error')\n\t\t\t\tisError = true\n\t\t\t} else {\n\t\t\t\tlet isExistRoom = false\n\t\t\t\tlet isPassword = true\n\t\t\t\tlistRoom.forEach((ele) => {\n\t\t\t\t\tif (ele.room !== room) {\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (ele.password !== password) {\n\t\t\t\t\t\t\tisError = true\n\t\t\t\t\t\t\tisExistRoom = true\n\t\t\t\t\t\t\tisPassword = false\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tisExistRoom = true\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\tif (!isExistRoom) error.push('Room is not exist')\n\t\t\t\tif (!isPassword) error.push('Wrong password')\n\t\t\t}\n\t\t\tif (!isError) {\n\t\t\t\tconsole.log('khong co loi nao ')\n\t\t\t\t// change router here\n\t\t\t} else {\n\t\t\t\tseterror(error)\n\t\t\t}\n\t\t} else {\n\t\t\tseterror(error)\n\t\t}\n\t}\n\tconst onCreate = async (e) => {\n\t\te.preventDefault\n\t\tlet { name, room, password } = state\n\t\tlet error = []\n\t\tlet isError = false\n\t\t//check if( any thing empty)\n\t\tif (name === '') {\n\t\t\terror.push(\"Name can't be empty\")\n\t\t\tisError = true\n\t\t}\n\t\tif (room === '') {\n\t\t\terror.push(\"Room can't be empty\")\n\t\t\tisError = true\n\t\t}\n\t\tif (password === '') {\n\t\t\terror.push(\"Password can't be empty\")\n\t\t\tisError = true\n\t\t}\n\t\tif (name && room && password) {\n\t\t\tlet listRoom = null\n\t\t\tawait fetch(GET_LIST_URL_FOR_LOGIN)\n\t\t\t\t.then((res) => res.json())\n\t\t\t\t.then((data) => (listRoom = data))\n\t\t\t\t.catch((error) => console.log(error))\n\t\t\tif (listRoom == null) {\n\t\t\t\terror.push('Server is off')\n\t\t\t} else if (!name || !room || !password) {\n\t\t\t\tconsole.log('Loi')\n\t\t\t} else {\n\t\t\t\t//sever is on\n\t\t\t\t//we need no room math\n\t\t\t\tlet isExistRoom = false\n\t\t\t\tlistRoom.forEach((ele) => {\n\t\t\t\t\tif (ele.room === room) {\n\t\t\t\t\t\tisExistRoom = true\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\tif (isExistRoom) {\n\t\t\t\t\terror.push(\"Room's name existed\")\n\t\t\t\t} else {\n\t\t\t\t\t//add new room\n\t\t\t\t\t// await fetch(GET_LIST_URL_FOR_LOGIN + `/${room}/${password}`)\n\t\t\t\t\t// \t.then((res) => console.log('send successful'))\n\t\t\t\t\t// \t.catch((error) => {\n\t\t\t\t\t// \t\tconsole.log(error)\n\t\t\t\t\t// \t})\n\t\t\t\t\t//change router here\n\t\t\t\t\tconsole.log('come here')\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (error) {\n\t\t\tconsole.log('error')\n\t\t} else {\n\t\t\tconsole.log('no error')\n\t\t}\n\t\t// await seterror(error)\n\t}\n\treturn (\n\t\t<div class='content'>\n\t\t\t<h1>Login</h1>\n\t\t\t<hr />\n\t\t\t<form action=''>\n\t\t\t\t<label htmlFor='name'>Name</label>\n\t\t\t\t<input\n\t\t\t\t\ttype='text'\n\t\t\t\t\tname='name'\n\t\t\t\t\tid='name'\n\t\t\t\t\tplaceholder='Enter your name'\n\t\t\t\t\tvalue={state.name}\n\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\tdispatch({\n\t\t\t\t\t\t\ttype: 'UPDATE NAME',\n\t\t\t\t\t\t\tpayload: e.target.value,\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t\t<label htmlFor='room'>Room</label>\n\t\t\t\t<input\n\t\t\t\t\ttype='text'\n\t\t\t\t\tname='room'\n\t\t\t\t\tid='room'\n\t\t\t\t\tplaceholder='Enter room'\n\t\t\t\t\tvalue={state.room}\n\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\tdispatch({\n\t\t\t\t\t\t\ttype: 'UPDATE ROOM',\n\t\t\t\t\t\t\tpayload: e.target.value,\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t\t<label htmlFor='password'>Password</label>\n\t\t\t\t<input\n\t\t\t\t\ttype='password'\n\t\t\t\t\tname='password'\n\t\t\t\t\tid='password'\n\t\t\t\t\tplaceholder='Enter password'\n\t\t\t\t\tvalue={state.password}\n\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\tdispatch({\n\t\t\t\t\t\t\ttype: 'UPDATE PASSWORD',\n\t\t\t\t\t\t\tpayload: e.target.value,\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t\t{/* <Link\n\t\t\t\t\tonClick={(e) =>\n\t\t\t\t\t\tstate.name && state.password && state.room\n\t\t\t\t\t\t\t? null\n\t\t\t\t\t\t\t: e.preventDefault()\n\t\t\t\t\t}\n\t\t\t\t\tto={`/chat`}\n\t\t\t\t> */}\n\t\t\t\t<div className='control-btn'>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclass='btn-sign-in'\n\t\t\t\t\t\tonClick={(e) => onSubmitForm(e)}\n\t\t\t\t\t>\n\t\t\t\t\t\tGO\n\t\t\t\t\t</button>\n\t\t\t\t\t<h1>OR</h1>\n\t\t\t\t\t<button class='btn-sign-in' onClick={(e) => onCreate(e)}>\n\t\t\t\t\t\tCREATE\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t{/* </Link> */}\n\t\t\t\t<Nontification error={error} />\n\t\t\t</form>\n\t\t</div>\n\t)\n}\n\nexport default LoginForm\n"]},"metadata":{},"sourceType":"module"}