{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/captainspring/Desktop/code/WebSocket/myproject/clientx/src/Components/ChatBox/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport ChatBoxStatusRoom from '../ChatBoxStatusRoom/index';\nimport ChatBoxMessageBox from '../ChatBoxMessageBox/index';\nimport ChatBoxTextMesBtn from '../ChatBoxTextMesBtn/index';\nimport { Redirect, useHistory, useParams } from 'react-router-dom';\nimport { GET_URL_FOR_SOCKET, GET_URL_FOR_MESSAGES } from '../../Config/index';\nimport io from 'socket.io-client';\nimport shortid from 'shortid';\nimport './index.css';\nlet socket;\n\nconst Index = () => {\n  _s();\n\n  const history = useHistory();\n  const param = useParams();\n  const username = localStorage.getItem('username');\n  const [messages, setMessages] = useState([]);\n  const {\n    room\n  } = param;\n\n  const load_messages_from_server = async room => {\n    await fetch(`${GET_URL_FOR_MESSAGES}/${room}`).then(res => res.json()).then(data => {\n      if (data.room_name) {\n        setMessages(data.messages);\n      }\n    }, error => console.log(error));\n  };\n\n  const updateListMessagesBecauseOfDeletedItem = message => {\n    let newMessages = [];\n    messages.forEach(ele => {\n      if (ele.id === message.id) {\n        ele.text = 'Message has been removed';\n        ele.isDelete = true;\n      }\n\n      newMessages.push(ele);\n    });\n    return newMessages;\n  }; //init socket client\n\n\n  useEffect(() => {\n    load_messages_from_server(room);\n    socket = io(GET_URL_FOR_SOCKET);\n    socket.emit('join', username, room);\n  }, []); //load data only 1 time and save to list message up\n\n  useEffect(() => {\n    load_messages_from_server(room);\n  }, []); //handle message from server socket , will update list message and re-render\n\n  useEffect(() => {\n    socket.on('message', user_text => {\n      setMessages([...messages, user_text]);\n    });\n  }, [messages]); //handle delete message from some one guys\n\n  useEffect(() => {\n    socket.on('thereisaguyjustdeletething', message => {\n      setMessages(updateListMessagesBecauseOfDeletedItem(message));\n    });\n  }, [messages]); // handle send message event (save server and call socket)\n\n  const sendMessage = async (msg, obj_date) => {\n    await fetch(`${GET_URL_FOR_MESSAGES}/${room}`, {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: username,\n        text: msg,\n        date: obj_date,\n        isDelete: false,\n        id: shortid.generate()\n      })\n    }).then(res => res.json()).then(data => {\n      console.log(data);\n      return;\n    }, error => {\n      console.log(error);\n      return;\n    });\n    socket.emit('sendMessage', {\n      msg,\n      obj_date\n    });\n    setMessages([...messages, {\n      username: username,\n      text: msg,\n      date: obj_date\n    }]);\n  }; // close room exit socket room\n\n\n  const handleExitRoom = () => {\n    history.replace('/');\n    socket.disconnect(0);\n  }; //handle delete (call server update status and emit event delete)\n\n\n  const handleDelete = async message => {\n    await fetch(`${GET_URL_FOR_MESSAGES}/${room}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        message: message\n      })\n    }).then(res => res.json()).then(data => console.log(data), error => {\n      console.log(error);\n    });\n    setMessages(updateListMessagesBecauseOfDeletedItem(message));\n    socket.emit('ivejustdeletesomeitem', message);\n  };\n\n  return localStorage.getItem('username') === null ? /*#__PURE__*/_jsxDEV(Redirect, {\n    to: \"/\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 3\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    classNam: \"body\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      classNam: \"main\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        classNam: \"message-board\",\n        children: [/*#__PURE__*/_jsxDEV(ChatBoxStatusRoom, {\n          room: param.room,\n          username: username,\n          handleExitRoom: handleExitRoom\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(ChatBoxMessageBox, {\n          messages: messages,\n          username: username,\n          handleDelete: handleDelete\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(ChatBoxTextMesBtn, {\n          sendMessage: sendMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Index, \"pfIMdRoHbY5S4dkm29EroqR0Lag=\", false, function () {\n  return [useHistory, useParams];\n});\n\n_c = Index;\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["/home/captainspring/Desktop/code/WebSocket/myproject/clientx/src/Components/ChatBox/index.js"],"names":["React","useEffect","useState","ChatBoxStatusRoom","ChatBoxMessageBox","ChatBoxTextMesBtn","Redirect","useHistory","useParams","GET_URL_FOR_SOCKET","GET_URL_FOR_MESSAGES","io","shortid","socket","Index","history","param","username","localStorage","getItem","messages","setMessages","room","load_messages_from_server","fetch","then","res","json","data","room_name","error","console","log","updateListMessagesBecauseOfDeletedItem","message","newMessages","forEach","ele","id","text","isDelete","push","emit","on","user_text","sendMessage","msg","obj_date","method","headers","body","JSON","stringify","date","generate","handleExitRoom","replace","disconnect","handleDelete"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport ChatBoxStatusRoom from '../ChatBoxStatusRoom/index'\nimport ChatBoxMessageBox from '../ChatBoxMessageBox/index'\nimport ChatBoxTextMesBtn from '../ChatBoxTextMesBtn/index'\nimport { Redirect, useHistory, useParams } from 'react-router-dom'\nimport { GET_URL_FOR_SOCKET, GET_URL_FOR_MESSAGES } from '../../Config/index'\nimport io from 'socket.io-client'\nimport shortid from 'shortid'\nimport './index.css'\n\nlet socket\n\nconst Index = () => {\n\tconst history = useHistory()\n\tconst param = useParams()\n\tconst username = localStorage.getItem('username')\n\tconst [messages, setMessages] = useState([])\n\tconst { room } = param\n\tconst load_messages_from_server = async (room) => {\n\t\tawait fetch(`${GET_URL_FOR_MESSAGES}/${room}`)\n\t\t\t.then((res) => res.json())\n\t\t\t.then(\n\t\t\t\t(data) => {\n\t\t\t\t\tif (data.room_name) {\n\t\t\t\t\t\tsetMessages(data.messages)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t(error) => console.log(error),\n\t\t\t)\n\t}\n\tconst updateListMessagesBecauseOfDeletedItem = (message) => {\n\t\tlet newMessages = []\n\t\tmessages.forEach((ele) => {\n\t\t\tif (ele.id === message.id) {\n\t\t\t\tele.text = 'Message has been removed'\n\t\t\t\tele.isDelete = true\n\t\t\t}\n\t\t\tnewMessages.push(ele)\n\t\t})\n\t\treturn newMessages\n\t}\n\t//init socket client\n\tuseEffect(() => {\n\t\tload_messages_from_server(room)\n\t\tsocket = io(GET_URL_FOR_SOCKET)\n\t\tsocket.emit('join', username, room)\n\t}, [])\n\t//load data only 1 time and save to list message up\n\tuseEffect(() => {\n\t\tload_messages_from_server(room)\n\t}, [])\n\t//handle message from server socket , will update list message and re-render\n\tuseEffect(() => {\n\t\tsocket.on('message', (user_text) => {\n\t\t\tsetMessages([...messages, user_text])\n\t\t})\n\t}, [messages])\n\t//handle delete message from some one guys\n\tuseEffect(() => {\n\t\tsocket.on('thereisaguyjustdeletething', (message) => {\n\t\t\tsetMessages(updateListMessagesBecauseOfDeletedItem(message))\n\t\t})\n\t}, [messages])\n\t// handle send message event (save server and call socket)\n\tconst sendMessage = async (msg, obj_date) => {\n\t\tawait fetch(`${GET_URL_FOR_MESSAGES}/${room}`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tusername: username,\n\t\t\t\ttext: msg,\n\t\t\t\tdate: obj_date,\n\t\t\t\tisDelete: false,\n\t\t\t\tid: shortid.generate(),\n\t\t\t}),\n\t\t})\n\t\t\t.then((res) => res.json())\n\t\t\t.then(\n\t\t\t\t(data) => {\n\t\t\t\t\tconsole.log(data)\n\t\t\t\t\treturn\n\t\t\t\t},\n\t\t\t\t(error) => {\n\t\t\t\t\tconsole.log(error)\n\t\t\t\t\treturn\n\t\t\t\t},\n\t\t\t)\n\t\tsocket.emit('sendMessage', { msg, obj_date })\n\t\tsetMessages([\n\t\t\t...messages,\n\t\t\t{\n\t\t\t\tusername: username,\n\t\t\t\ttext: msg,\n\t\t\t\tdate: obj_date,\n\t\t\t},\n\t\t])\n\t}\n\t// close room exit socket room\n\tconst handleExitRoom = () => {\n\t\thistory.replace('/')\n\t\tsocket.disconnect(0)\n\t}\n\t//handle delete (call server update status and emit event delete)\n\tconst handleDelete = async (message) => {\n\t\tawait fetch(`${GET_URL_FOR_MESSAGES}/${room}`, {\n\t\t\tmethod: 'PATCH',\n\t\t\theaders: {\n\t\t\t\t'Content-type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tmessage: message,\n\t\t\t}),\n\t\t})\n\t\t\t.then((res) => res.json())\n\t\t\t.then(\n\t\t\t\t(data) => console.log(data),\n\t\t\t\t(error) => {\n\t\t\t\t\tconsole.log(error)\n\t\t\t\t},\n\t\t\t)\n\t\tsetMessages(updateListMessagesBecauseOfDeletedItem(message))\n\t\tsocket.emit('ivejustdeletesomeitem', message)\n\t}\n\n\treturn localStorage.getItem('username') === null ? (\n\t\t<Redirect to='/' />\n\t) : (\n\t\t<div classNam\n\t\t='body'>\n\t\t\t<div classNam\n\t\t\t='main'>\n\t\t\t\t<div classNam\n\t\t\t\t='message-board'>\n\t\t\t\t\t<ChatBoxStatusRoom\n\t\t\t\t\t\troom={param.room}\n\t\t\t\t\t\tusername={username}\n\t\t\t\t\t\thandleExitRoom={handleExitRoom}\n\t\t\t\t\t/>\n\t\t\t\t\t<ChatBoxMessageBox\n\t\t\t\t\t\tmessages={messages}\n\t\t\t\t\t\tusername={username}\n\t\t\t\t\t\thandleDelete={handleDelete}\n\t\t\t\t\t/>\n\t\t\t\t\t<ChatBoxTextMesBtn sendMessage={sendMessage} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Index\n"]},"metadata":{},"sourceType":"module"}