{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/captainspring/Desktop/code/WebSocket/myproject/clientx/src/Components/ChatBox/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport ChatBoxStatusRoom from '../ChatBoxStatusRoom/index';\nimport ChatBoxMessageBox from '../ChatBoxMessageBox/index';\nimport ChatBoxTextMesBtn from '../ChatBoxTextMesBtn/index';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { GET_URL_FOR_SOCKET, GET_URL_FOR_MESSAGES } from '../../Config/index';\nimport io from 'socket.io-client';\nimport shortid from 'shortid';\nimport './index.css';\nlet socket;\n\nconst Index = props => {\n  _s();\n\n  const {\n    userroom\n  } = props;\n  const history = useHistory();\n  const param = useParams();\n  const username = userroom[0];\n  const room = userroom[1];\n  const [messages, setMessages] = useState([]);\n  const [deleteMessage, setDeleteMessage] = useState('');\n\n  const load_messages_from_server = async room => {\n    await fetch(`${GET_URL_FOR_MESSAGES}/${room}`).then(res => res.json()).then(data => {\n      if (data.room_name) {\n        setMessages(data.messages);\n      }\n    }, error => console.log(error));\n  };\n\n  const [open, setOpen] = React.useState(true);\n\n  const handleClickOpen = message => {\n    setOpen(true);\n    setDeleteMessage(message);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const updateListMessagesBecauseOfDeletedItem = message => {\n    let newMessages = [];\n    messages.forEach(ele => {\n      if (ele.id === message.id) {\n        ele.text = 'Message has been removed';\n        ele.isDelete = true;\n      }\n\n      newMessages.push(ele);\n    });\n    return newMessages;\n  }; //init socket client\n\n\n  useEffect(() => {\n    load_messages_from_server(room);\n    socket = io(GET_URL_FOR_SOCKET);\n    socket.emit('join', username, room);\n  }); //load data only 1 time and save to list message up\n\n  useEffect(() => {\n    load_messages_from_server(room);\n  }); //handle message from server socket , will update list message and re-render\n\n  useEffect(() => {\n    socket.on('message', user_text => {\n      setMessages([...messages, user_text]);\n    });\n  }, [messages]); //handle delete message from some one guys\n\n  useEffect(() => {\n    socket.on('thereisaguyjustdeletething', message => {\n      setMessages(updateListMessagesBecauseOfDeletedItem(message));\n    });\n  }, [messages]); // handle send message event (save server and call socket)\n\n  const sendMessage = async (msg, obj_date) => {\n    await fetch(`${GET_URL_FOR_MESSAGES}/${room}`, {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: username,\n        text: msg,\n        date: obj_date,\n        isDelete: false,\n        id: shortid.generate()\n      })\n    }).then(res => res.json()).then(data => {\n      console.log(data);\n      return;\n    }, error => {\n      console.log(error);\n      return;\n    });\n    socket.emit('sendMessage', {\n      msg,\n      obj_date\n    });\n    setMessages([...messages, {\n      username: username,\n      text: msg,\n      date: obj_date\n    }]);\n  }; // close room exit socket room\n\n\n  const handleExitRoom = () => {\n    localStorage.removeItem('token_room');\n    history.replace('/room');\n    socket.disconnect(0);\n  }; //handle delete (call server update status and emit event delete)\n\n\n  const handleDelete = async message => {\n    await fetch(`${GET_URL_FOR_MESSAGES}/${room}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        message: message\n      })\n    }).then(res => res.json()).then(data => console.log(data), error => {\n      console.log(error);\n    }).catch(err => console.log(err));\n    setMessages(updateListMessagesBecauseOfDeletedItem(message));\n    socket.emit('ivejustdeletesomeitem', message);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"body\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-board\",\n        children: [/*#__PURE__*/_jsxDEV(ChatBoxStatusRoom, {\n          room: param.room,\n          username: username,\n          handleExitRoom: handleExitRoom\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(ChatBoxMessageBox, {\n          messages: messages,\n          username: username,\n          handleClickOpen: handleClickOpen\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(ChatBoxTextMesBtn, {\n          sendMessage: sendMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: open,\n      onClose: handleClose,\n      \"aria-labelledby\": \"alert-dialog-title\",\n      \"aria-describedby\": \"alert-dialog-description\",\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        id: \"alert-dialog-title\",\n        children: 'Deleting?'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(DialogContentText, {\n          id: \"alert-dialog-description\",\n          children: \"You are trying to delete a message .This action can't be undone!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleClose,\n          color: \"primary\",\n          children: \"Keep!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleDelete,\n          color: \"primary\",\n          autoFocus: true,\n          children: \"Still Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Index, \"qgnTIcH3q4428CuFAEtR56ydjxI=\", false, function () {\n  return [useHistory, useParams];\n});\n\n_c = Index;\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["/home/captainspring/Desktop/code/WebSocket/myproject/clientx/src/Components/ChatBox/index.js"],"names":["React","useEffect","useState","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","ChatBoxStatusRoom","ChatBoxMessageBox","ChatBoxTextMesBtn","useHistory","useParams","GET_URL_FOR_SOCKET","GET_URL_FOR_MESSAGES","io","shortid","socket","Index","props","userroom","history","param","username","room","messages","setMessages","deleteMessage","setDeleteMessage","load_messages_from_server","fetch","then","res","json","data","room_name","error","console","log","open","setOpen","handleClickOpen","message","handleClose","updateListMessagesBecauseOfDeletedItem","newMessages","forEach","ele","id","text","isDelete","push","emit","on","user_text","sendMessage","msg","obj_date","method","headers","body","JSON","stringify","date","generate","handleExitRoom","localStorage","removeItem","replace","disconnect","handleDelete","catch","err"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport ChatBoxStatusRoom from '../ChatBoxStatusRoom/index'\nimport ChatBoxMessageBox from '../ChatBoxMessageBox/index'\nimport ChatBoxTextMesBtn from '../ChatBoxTextMesBtn/index'\nimport { useHistory, useParams } from 'react-router-dom'\nimport { GET_URL_FOR_SOCKET, GET_URL_FOR_MESSAGES } from '../../Config/index'\nimport io from 'socket.io-client'\nimport shortid from 'shortid'\nimport './index.css'\n\nlet socket\n\nconst Index = (props) => {\n\tconst { userroom } = props\n\tconst history = useHistory()\n\tconst param = useParams()\n\tconst username = userroom[0]\n\tconst room = userroom[1]\n\tconst [messages, setMessages] = useState([])\n\tconst [deleteMessage, setDeleteMessage] = useState('')\n\tconst load_messages_from_server = async (room) => {\n\t\tawait fetch(`${GET_URL_FOR_MESSAGES}/${room}`)\n\t\t\t.then((res) => res.json())\n\t\t\t.then(\n\t\t\t\t(data) => {\n\t\t\t\t\tif (data.room_name) {\n\t\t\t\t\t\tsetMessages(data.messages)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t(error) => console.log(error),\n\t\t\t)\n\t}\n\n\tconst [open, setOpen] = React.useState(true)\n\n\tconst handleClickOpen = (message) => {\n\t\tsetOpen(true)\n\t\tsetDeleteMessage(message)\n\t}\n\n\tconst handleClose = () => {\n\t\tsetOpen(false)\n\t}\n\n\tconst updateListMessagesBecauseOfDeletedItem = (message) => {\n\t\tlet newMessages = []\n\t\tmessages.forEach((ele) => {\n\t\t\tif (ele.id === message.id) {\n\t\t\t\tele.text = 'Message has been removed'\n\t\t\t\tele.isDelete = true\n\t\t\t}\n\t\t\tnewMessages.push(ele)\n\t\t})\n\t\treturn newMessages\n\t}\n\t//init socket client\n\tuseEffect(() => {\n\t\tload_messages_from_server(room)\n\t\tsocket = io(GET_URL_FOR_SOCKET)\n\t\tsocket.emit('join', username, room)\n\t})\n\t//load data only 1 time and save to list message up\n\tuseEffect(() => {\n\t\tload_messages_from_server(room)\n\t})\n\t//handle message from server socket , will update list message and re-render\n\tuseEffect(() => {\n\t\tsocket.on('message', (user_text) => {\n\t\t\tsetMessages([...messages, user_text])\n\t\t})\n\t}, [messages])\n\t//handle delete message from some one guys\n\tuseEffect(() => {\n\t\tsocket.on('thereisaguyjustdeletething', (message) => {\n\t\t\tsetMessages(updateListMessagesBecauseOfDeletedItem(message))\n\t\t})\n\t}, [messages])\n\t// handle send message event (save server and call socket)\n\tconst sendMessage = async (msg, obj_date) => {\n\t\tawait fetch(`${GET_URL_FOR_MESSAGES}/${room}`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tusername: username,\n\t\t\t\ttext: msg,\n\t\t\t\tdate: obj_date,\n\t\t\t\tisDelete: false,\n\t\t\t\tid: shortid.generate(),\n\t\t\t}),\n\t\t})\n\t\t\t.then((res) => res.json())\n\t\t\t.then(\n\t\t\t\t(data) => {\n\t\t\t\t\tconsole.log(data)\n\t\t\t\t\treturn\n\t\t\t\t},\n\t\t\t\t(error) => {\n\t\t\t\t\tconsole.log(error)\n\t\t\t\t\treturn\n\t\t\t\t},\n\t\t\t)\n\t\tsocket.emit('sendMessage', { msg, obj_date })\n\t\tsetMessages([\n\t\t\t...messages,\n\t\t\t{\n\t\t\t\tusername: username,\n\t\t\t\ttext: msg,\n\t\t\t\tdate: obj_date,\n\t\t\t},\n\t\t])\n\t}\n\t// close room exit socket room\n\tconst handleExitRoom = () => {\n\t\tlocalStorage.removeItem('token_room')\n\t\thistory.replace('/room')\n\t\tsocket.disconnect(0)\n\t}\n\t//handle delete (call server update status and emit event delete)\n\tconst handleDelete = async (message) => {\n\t\tawait fetch(`${GET_URL_FOR_MESSAGES}/${room}`, {\n\t\t\tmethod: 'PATCH',\n\t\t\theaders: {\n\t\t\t\t'Content-type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tmessage: message,\n\t\t\t}),\n\t\t})\n\t\t\t.then((res) => res.json())\n\t\t\t.then(\n\t\t\t\t(data) => console.log(data),\n\t\t\t\t(error) => {\n\t\t\t\t\tconsole.log(error)\n\t\t\t\t},\n\t\t\t)\n\t\t\t.catch((err) => console.log(err))\n\t\tsetMessages(updateListMessagesBecauseOfDeletedItem(message))\n\t\tsocket.emit('ivejustdeletesomeitem', message)\n\t}\n\n\treturn (\n\t\t<div className='body'>\n\t\t\t<div className='main'>\n\t\t\t\t<div className='message-board'>\n\t\t\t\t\t<ChatBoxStatusRoom\n\t\t\t\t\t\troom={param.room}\n\t\t\t\t\t\tusername={username}\n\t\t\t\t\t\thandleExitRoom={handleExitRoom}\n\t\t\t\t\t/>\n\t\t\t\t\t<ChatBoxMessageBox\n\t\t\t\t\t\tmessages={messages}\n\t\t\t\t\t\tusername={username}\n\t\t\t\t\t\thandleClickOpen={handleClickOpen}\n\t\t\t\t\t/>\n\t\t\t\t\t<ChatBoxTextMesBtn sendMessage={sendMessage} />\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<Dialog\n\t\t\t\topen={open}\n\t\t\t\tonClose={handleClose}\n\t\t\t\taria-labelledby='alert-dialog-title'\n\t\t\t\taria-describedby='alert-dialog-description'\n\t\t\t>\n\t\t\t\t<DialogTitle id='alert-dialog-title'>{'Deleting?'}</DialogTitle>\n\t\t\t\t<DialogContent>\n\t\t\t\t\t<DialogContentText id='alert-dialog-description'>\n\t\t\t\t\t\tYou are trying to delete a message .This action can't be\n\t\t\t\t\t\tundone!\n\t\t\t\t\t</DialogContentText>\n\t\t\t\t</DialogContent>\n\t\t\t\t<DialogActions>\n\t\t\t\t\t<Button onClick={handleClose} color='primary'>\n\t\t\t\t\t\tKeep!\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button onClick={handleDelete} color='primary' autoFocus>\n\t\t\t\t\t\tStill Delete\n\t\t\t\t\t</Button>\n\t\t\t\t</DialogActions>\n\t\t\t</Dialog>\n\t\t</div>\n\t)\n}\n\nexport default Index\n"]},"metadata":{},"sourceType":"module"}